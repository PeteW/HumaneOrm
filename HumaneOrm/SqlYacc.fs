// Implementation file for parser generated by fsyacc
module Parser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open Microsoft.FSharp.Text.Lexing
open Microsoft.FSharp.Text.Parsing.ParseHelpers
# 1 "SqlYacc.fsy"

open HumaneOrm.Sql

# 10 "SqlYacc.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | LPAREN
  | RPAREN
  | LBRACKET
  | RBRACKET
  | EOF
  | ASC
  | DESC
  | NOT
  | NULL
  | CAST
  | AS
  | BETWEEN
  | SET
  | WITH
  | SELECT
  | FROM
  | WHERE
  | ORDER
  | BY
  | TOP
  | COUNT
  | DISTINCT
  | JOIN
  | INNER
  | LEFT
  | RIGHT
  | ON
  | CROSS
  | APPLY
  | OUTER
  | EQ
  | LT
  | LE
  | GT
  | GE
  | MUL
  | SUB
  | DIV
  | MOD
  | STAR
  | ADD
  | POW
  | LIKE
  | ESCAPE
  | COMMA
  | DOT
  | AND
  | OR
  | FLOAT of (float)
  | INT of (int)
  | ID of (string)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_LPAREN
    | TOKEN_RPAREN
    | TOKEN_LBRACKET
    | TOKEN_RBRACKET
    | TOKEN_EOF
    | TOKEN_ASC
    | TOKEN_DESC
    | TOKEN_NOT
    | TOKEN_NULL
    | TOKEN_CAST
    | TOKEN_AS
    | TOKEN_BETWEEN
    | TOKEN_SET
    | TOKEN_WITH
    | TOKEN_SELECT
    | TOKEN_FROM
    | TOKEN_WHERE
    | TOKEN_ORDER
    | TOKEN_BY
    | TOKEN_TOP
    | TOKEN_COUNT
    | TOKEN_DISTINCT
    | TOKEN_JOIN
    | TOKEN_INNER
    | TOKEN_LEFT
    | TOKEN_RIGHT
    | TOKEN_ON
    | TOKEN_CROSS
    | TOKEN_APPLY
    | TOKEN_OUTER
    | TOKEN_EQ
    | TOKEN_LT
    | TOKEN_LE
    | TOKEN_GT
    | TOKEN_GE
    | TOKEN_MUL
    | TOKEN_SUB
    | TOKEN_DIV
    | TOKEN_MOD
    | TOKEN_STAR
    | TOKEN_ADD
    | TOKEN_POW
    | TOKEN_LIKE
    | TOKEN_ESCAPE
    | TOKEN_COMMA
    | TOKEN_DOT
    | TOKEN_AND
    | TOKEN_OR
    | TOKEN_FLOAT
    | TOKEN_INT
    | TOKEN_ID
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start
    | NONTERM_query
    | NONTERM_subquery
    | NONTERM_optTopDistinct
    | NONTERM_columnList
    | NONTERM_column
    | NONTERM_expressionChain
    | NONTERM_expression
    | NONTERM_joinList
    | NONTERM_joinClause
    | NONTERM_joinTable
    | NONTERM_joinOnClause
    | NONTERM_whereClause
    | NONTERM_op
    | NONTERM_value
    | NONTERM_orderByClause
    | NONTERM_orderByList
    | NONTERM_orderBy

// This function maps tokens to integers indexes
let tagOfToken (t:token) = 
  match t with
  | LPAREN  -> 0 
  | RPAREN  -> 1 
  | LBRACKET  -> 2 
  | RBRACKET  -> 3 
  | EOF  -> 4 
  | ASC  -> 5 
  | DESC  -> 6 
  | NOT  -> 7 
  | NULL  -> 8 
  | CAST  -> 9 
  | AS  -> 10 
  | BETWEEN  -> 11 
  | SET  -> 12 
  | WITH  -> 13 
  | SELECT  -> 14 
  | FROM  -> 15 
  | WHERE  -> 16 
  | ORDER  -> 17 
  | BY  -> 18 
  | TOP  -> 19 
  | COUNT  -> 20 
  | DISTINCT  -> 21 
  | JOIN  -> 22 
  | INNER  -> 23 
  | LEFT  -> 24 
  | RIGHT  -> 25 
  | ON  -> 26 
  | CROSS  -> 27 
  | APPLY  -> 28 
  | OUTER  -> 29 
  | EQ  -> 30 
  | LT  -> 31 
  | LE  -> 32 
  | GT  -> 33 
  | GE  -> 34 
  | MUL  -> 35 
  | SUB  -> 36 
  | DIV  -> 37 
  | MOD  -> 38 
  | STAR  -> 39 
  | ADD  -> 40 
  | POW  -> 41 
  | LIKE  -> 42 
  | ESCAPE  -> 43 
  | COMMA  -> 44 
  | DOT  -> 45 
  | AND  -> 46 
  | OR  -> 47 
  | FLOAT _ -> 48 
  | INT _ -> 49 
  | ID _ -> 50 

// This function maps integers indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_LPAREN 
  | 1 -> TOKEN_RPAREN 
  | 2 -> TOKEN_LBRACKET 
  | 3 -> TOKEN_RBRACKET 
  | 4 -> TOKEN_EOF 
  | 5 -> TOKEN_ASC 
  | 6 -> TOKEN_DESC 
  | 7 -> TOKEN_NOT 
  | 8 -> TOKEN_NULL 
  | 9 -> TOKEN_CAST 
  | 10 -> TOKEN_AS 
  | 11 -> TOKEN_BETWEEN 
  | 12 -> TOKEN_SET 
  | 13 -> TOKEN_WITH 
  | 14 -> TOKEN_SELECT 
  | 15 -> TOKEN_FROM 
  | 16 -> TOKEN_WHERE 
  | 17 -> TOKEN_ORDER 
  | 18 -> TOKEN_BY 
  | 19 -> TOKEN_TOP 
  | 20 -> TOKEN_COUNT 
  | 21 -> TOKEN_DISTINCT 
  | 22 -> TOKEN_JOIN 
  | 23 -> TOKEN_INNER 
  | 24 -> TOKEN_LEFT 
  | 25 -> TOKEN_RIGHT 
  | 26 -> TOKEN_ON 
  | 27 -> TOKEN_CROSS 
  | 28 -> TOKEN_APPLY 
  | 29 -> TOKEN_OUTER 
  | 30 -> TOKEN_EQ 
  | 31 -> TOKEN_LT 
  | 32 -> TOKEN_LE 
  | 33 -> TOKEN_GT 
  | 34 -> TOKEN_GE 
  | 35 -> TOKEN_MUL 
  | 36 -> TOKEN_SUB 
  | 37 -> TOKEN_DIV 
  | 38 -> TOKEN_MOD 
  | 39 -> TOKEN_STAR 
  | 40 -> TOKEN_ADD 
  | 41 -> TOKEN_POW 
  | 42 -> TOKEN_LIKE 
  | 43 -> TOKEN_ESCAPE 
  | 44 -> TOKEN_COMMA 
  | 45 -> TOKEN_DOT 
  | 46 -> TOKEN_AND 
  | 47 -> TOKEN_OR 
  | 48 -> TOKEN_FLOAT 
  | 49 -> TOKEN_INT 
  | 50 -> TOKEN_ID 
  | 53 -> TOKEN_end_of_input
  | 51 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startstart 
    | 1 -> NONTERM_start 
    | 2 -> NONTERM_query 
    | 3 -> NONTERM_subquery 
    | 4 -> NONTERM_subquery 
    | 5 -> NONTERM_optTopDistinct 
    | 6 -> NONTERM_optTopDistinct 
    | 7 -> NONTERM_optTopDistinct 
    | 8 -> NONTERM_columnList 
    | 9 -> NONTERM_columnList 
    | 10 -> NONTERM_column 
    | 11 -> NONTERM_column 
    | 12 -> NONTERM_column 
    | 13 -> NONTERM_expressionChain 
    | 14 -> NONTERM_expressionChain 
    | 15 -> NONTERM_expressionChain 
    | 16 -> NONTERM_expressionChain 
    | 17 -> NONTERM_expressionChain 
    | 18 -> NONTERM_expressionChain 
    | 19 -> NONTERM_expressionChain 
    | 20 -> NONTERM_expression 
    | 21 -> NONTERM_expression 
    | 22 -> NONTERM_joinList 
    | 23 -> NONTERM_joinList 
    | 24 -> NONTERM_joinList 
    | 25 -> NONTERM_joinClause 
    | 26 -> NONTERM_joinClause 
    | 27 -> NONTERM_joinClause 
    | 28 -> NONTERM_joinClause 
    | 29 -> NONTERM_joinClause 
    | 30 -> NONTERM_joinClause 
    | 31 -> NONTERM_joinTable 
    | 32 -> NONTERM_joinTable 
    | 33 -> NONTERM_joinTable 
    | 34 -> NONTERM_joinTable 
    | 35 -> NONTERM_joinTable 
    | 36 -> NONTERM_joinOnClause 
    | 37 -> NONTERM_joinOnClause 
    | 38 -> NONTERM_whereClause 
    | 39 -> NONTERM_whereClause 
    | 40 -> NONTERM_op 
    | 41 -> NONTERM_op 
    | 42 -> NONTERM_op 
    | 43 -> NONTERM_op 
    | 44 -> NONTERM_op 
    | 45 -> NONTERM_op 
    | 46 -> NONTERM_op 
    | 47 -> NONTERM_op 
    | 48 -> NONTERM_op 
    | 49 -> NONTERM_op 
    | 50 -> NONTERM_op 
    | 51 -> NONTERM_op 
    | 52 -> NONTERM_op 
    | 53 -> NONTERM_op 
    | 54 -> NONTERM_op 
    | 55 -> NONTERM_value 
    | 56 -> NONTERM_value 
    | 57 -> NONTERM_value 
    | 58 -> NONTERM_value 
    | 59 -> NONTERM_orderByClause 
    | 60 -> NONTERM_orderByClause 
    | 61 -> NONTERM_orderByList 
    | 62 -> NONTERM_orderByList 
    | 63 -> NONTERM_orderBy 
    | 64 -> NONTERM_orderBy 
    | 65 -> NONTERM_orderBy 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 53 
let _fsyacc_tagOfErrorTerminal = 51

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | LPAREN  -> "LPAREN" 
  | RPAREN  -> "RPAREN" 
  | LBRACKET  -> "LBRACKET" 
  | RBRACKET  -> "RBRACKET" 
  | EOF  -> "EOF" 
  | ASC  -> "ASC" 
  | DESC  -> "DESC" 
  | NOT  -> "NOT" 
  | NULL  -> "NULL" 
  | CAST  -> "CAST" 
  | AS  -> "AS" 
  | BETWEEN  -> "BETWEEN" 
  | SET  -> "SET" 
  | WITH  -> "WITH" 
  | SELECT  -> "SELECT" 
  | FROM  -> "FROM" 
  | WHERE  -> "WHERE" 
  | ORDER  -> "ORDER" 
  | BY  -> "BY" 
  | TOP  -> "TOP" 
  | COUNT  -> "COUNT" 
  | DISTINCT  -> "DISTINCT" 
  | JOIN  -> "JOIN" 
  | INNER  -> "INNER" 
  | LEFT  -> "LEFT" 
  | RIGHT  -> "RIGHT" 
  | ON  -> "ON" 
  | CROSS  -> "CROSS" 
  | APPLY  -> "APPLY" 
  | OUTER  -> "OUTER" 
  | EQ  -> "EQ" 
  | LT  -> "LT" 
  | LE  -> "LE" 
  | GT  -> "GT" 
  | GE  -> "GE" 
  | MUL  -> "MUL" 
  | SUB  -> "SUB" 
  | DIV  -> "DIV" 
  | MOD  -> "MOD" 
  | STAR  -> "STAR" 
  | ADD  -> "ADD" 
  | POW  -> "POW" 
  | LIKE  -> "LIKE" 
  | ESCAPE  -> "ESCAPE" 
  | COMMA  -> "COMMA" 
  | DOT  -> "DOT" 
  | AND  -> "AND" 
  | OR  -> "OR" 
  | FLOAT _ -> "FLOAT" 
  | INT _ -> "INT" 
  | ID _ -> "ID" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | LPAREN  -> (null : System.Object) 
  | RPAREN  -> (null : System.Object) 
  | LBRACKET  -> (null : System.Object) 
  | RBRACKET  -> (null : System.Object) 
  | EOF  -> (null : System.Object) 
  | ASC  -> (null : System.Object) 
  | DESC  -> (null : System.Object) 
  | NOT  -> (null : System.Object) 
  | NULL  -> (null : System.Object) 
  | CAST  -> (null : System.Object) 
  | AS  -> (null : System.Object) 
  | BETWEEN  -> (null : System.Object) 
  | SET  -> (null : System.Object) 
  | WITH  -> (null : System.Object) 
  | SELECT  -> (null : System.Object) 
  | FROM  -> (null : System.Object) 
  | WHERE  -> (null : System.Object) 
  | ORDER  -> (null : System.Object) 
  | BY  -> (null : System.Object) 
  | TOP  -> (null : System.Object) 
  | COUNT  -> (null : System.Object) 
  | DISTINCT  -> (null : System.Object) 
  | JOIN  -> (null : System.Object) 
  | INNER  -> (null : System.Object) 
  | LEFT  -> (null : System.Object) 
  | RIGHT  -> (null : System.Object) 
  | ON  -> (null : System.Object) 
  | CROSS  -> (null : System.Object) 
  | APPLY  -> (null : System.Object) 
  | OUTER  -> (null : System.Object) 
  | EQ  -> (null : System.Object) 
  | LT  -> (null : System.Object) 
  | LE  -> (null : System.Object) 
  | GT  -> (null : System.Object) 
  | GE  -> (null : System.Object) 
  | MUL  -> (null : System.Object) 
  | SUB  -> (null : System.Object) 
  | DIV  -> (null : System.Object) 
  | MOD  -> (null : System.Object) 
  | STAR  -> (null : System.Object) 
  | ADD  -> (null : System.Object) 
  | POW  -> (null : System.Object) 
  | LIKE  -> (null : System.Object) 
  | ESCAPE  -> (null : System.Object) 
  | COMMA  -> (null : System.Object) 
  | DOT  -> (null : System.Object) 
  | AND  -> (null : System.Object) 
  | OR  -> (null : System.Object) 
  | FLOAT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | INT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | ID _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us; 65535us; 1us; 65535us; 0us; 1us; 3us; 65535us; 0us; 2us; 12us; 14us; 13us; 14us; 15us; 65535us; 5us; 41us; 7us; 80us; 13us; 41us; 25us; 41us; 32us; 41us; 43us; 41us; 51us; 41us; 59us; 60us; 62us; 63us; 65us; 66us; 67us; 80us; 72us; 80us; 77us; 80us; 88us; 41us; 89us; 41us; 1us; 65535us; 4us; 5us; 1us; 65535us; 5us; 6us; 2us; 65535us; 5us; 24us; 25us; 26us; 8us; 65535us; 5us; 28us; 13us; 48us; 25us; 28us; 32us; 33us; 43us; 44us; 51us; 47us; 88us; 49us; 89us; 50us; 8us; 65535us; 5us; 46us; 13us; 46us; 25us; 46us; 32us; 46us; 43us; 46us; 51us; 46us; 88us; 46us; 89us; 46us; 2us; 65535us; 8us; 9us; 56us; 57us; 2us; 65535us; 8us; 56us; 56us; 56us; 4us; 65535us; 7us; 8us; 67us; 68us; 72us; 73us; 77us; 78us; 3us; 65535us; 68us; 69us; 73us; 74us; 78us; 79us; 1us; 65535us; 9us; 10us; 7us; 65535us; 28us; 51us; 33us; 51us; 44us; 51us; 47us; 51us; 48us; 51us; 49us; 51us; 50us; 51us; 24us; 65535us; 5us; 27us; 7us; 81us; 13us; 53us; 15us; 16us; 17us; 18us; 25us; 27us; 29us; 30us; 32us; 53us; 34us; 35us; 37us; 38us; 43us; 53us; 51us; 53us; 54us; 55us; 67us; 81us; 72us; 81us; 77us; 81us; 82us; 83us; 84us; 85us; 86us; 87us; 88us; 53us; 89us; 53us; 105us; 106us; 112us; 117us; 115us; 117us; 1us; 65535us; 10us; 11us; 2us; 65535us; 112us; 113us; 115us; 116us; 2us; 65535us; 112us; 114us; 115us; 114us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 3us; 7us; 23us; 25us; 27us; 30us; 39us; 48us; 51us; 54us; 59us; 63us; 65us; 73us; 98us; 100us; 103us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 1us; 1us; 1us; 1us; 1us; 2us; 1us; 2us; 2us; 2us; 9us; 1us; 2us; 1us; 2us; 1us; 2us; 1us; 2us; 1us; 2us; 2us; 3us; 4us; 3us; 3us; 4us; 19us; 2us; 3us; 4us; 2us; 3us; 4us; 1us; 3us; 1us; 4us; 1us; 4us; 1us; 6us; 1us; 6us; 1us; 6us; 1us; 6us; 1us; 7us; 1us; 8us; 1us; 9us; 1us; 9us; 3us; 10us; 20us; 21us; 3us; 11us; 12us; 18us; 1us; 12us; 1us; 12us; 2us; 13us; 14us; 2us; 13us; 14us; 3us; 13us; 14us; 18us; 2us; 13us; 14us; 2us; 13us; 14us; 1us; 13us; 1us; 14us; 1us; 14us; 1us; 14us; 1us; 14us; 1us; 15us; 1us; 16us; 1us; 16us; 2us; 16us; 18us; 1us; 16us; 1us; 17us; 2us; 18us; 18us; 2us; 18us; 19us; 2us; 18us; 37us; 2us; 18us; 39us; 1us; 18us; 1us; 19us; 2us; 20us; 21us; 1us; 21us; 1us; 21us; 2us; 23us; 24us; 1us; 24us; 2us; 25us; 28us; 1us; 25us; 1us; 25us; 1us; 26us; 1us; 26us; 1us; 26us; 1us; 27us; 1us; 27us; 1us; 27us; 1us; 28us; 1us; 28us; 1us; 28us; 1us; 29us; 1us; 29us; 1us; 29us; 1us; 29us; 1us; 29us; 1us; 30us; 1us; 30us; 1us; 30us; 1us; 30us; 1us; 30us; 1us; 31us; 4us; 32us; 33us; 34us; 35us; 2us; 32us; 34us; 2us; 32us; 34us; 1us; 32us; 1us; 32us; 1us; 33us; 1us; 33us; 1us; 37us; 1us; 39us; 1us; 40us; 1us; 41us; 1us; 42us; 1us; 43us; 1us; 44us; 1us; 45us; 1us; 46us; 1us; 47us; 1us; 48us; 1us; 49us; 1us; 50us; 1us; 51us; 1us; 52us; 1us; 53us; 1us; 54us; 1us; 55us; 1us; 55us; 1us; 55us; 1us; 56us; 1us; 57us; 1us; 58us; 1us; 60us; 1us; 60us; 1us; 60us; 2us; 61us; 62us; 1us; 62us; 1us; 62us; 3us; 63us; 64us; 65us; 1us; 64us; 1us; 65us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 6us; 8us; 10us; 12us; 15us; 17us; 19us; 21us; 23us; 25us; 28us; 32us; 35us; 38us; 40us; 42us; 44us; 46us; 48us; 50us; 52us; 54us; 56us; 58us; 60us; 64us; 68us; 70us; 72us; 75us; 78us; 82us; 85us; 88us; 90us; 92us; 94us; 96us; 98us; 100us; 102us; 104us; 107us; 109us; 111us; 114us; 117us; 120us; 123us; 125us; 127us; 130us; 132us; 134us; 137us; 139us; 142us; 144us; 146us; 148us; 150us; 152us; 154us; 156us; 158us; 160us; 162us; 164us; 166us; 168us; 170us; 172us; 174us; 176us; 178us; 180us; 182us; 184us; 186us; 191us; 194us; 197us; 199us; 201us; 203us; 205us; 207us; 209us; 211us; 213us; 215us; 217us; 219us; 221us; 223us; 225us; 227us; 229us; 231us; 233us; 235us; 237us; 239us; 241us; 243us; 245us; 247us; 249us; 251us; 253us; 255us; 257us; 260us; 262us; 264us; 268us; 270us; |]
let _fsyacc_action_rows = 120
let _fsyacc_actionTableElements = [|1us; 32768us; 14us; 4us; 0us; 49152us; 1us; 32768us; 4us; 3us; 0us; 16385us; 2us; 16389us; 19us; 19us; 21us; 23us; 7us; 32768us; 0us; 13us; 2us; 105us; 9us; 31us; 20us; 42us; 48us; 109us; 49us; 108us; 50us; 110us; 2us; 32768us; 15us; 7us; 44us; 25us; 5us; 32768us; 0us; 12us; 2us; 105us; 48us; 109us; 49us; 108us; 50us; 110us; 5us; 16406us; 23us; 58us; 24us; 70us; 25us; 75us; 27us; 64us; 29us; 61us; 1us; 16422us; 16us; 89us; 1us; 16443us; 17us; 111us; 0us; 16386us; 1us; 32768us; 14us; 4us; 8us; 32768us; 0us; 13us; 2us; 105us; 9us; 31us; 14us; 4us; 20us; 42us; 48us; 109us; 49us; 108us; 50us; 110us; 1us; 32768us; 1us; 15us; 5us; 32768us; 2us; 105us; 10us; 17us; 48us; 109us; 49us; 108us; 50us; 110us; 0us; 16387us; 4us; 32768us; 2us; 105us; 48us; 109us; 49us; 108us; 50us; 110us; 0us; 16388us; 1us; 32768us; 0us; 20us; 1us; 32768us; 49us; 21us; 1us; 32768us; 1us; 22us; 0us; 16390us; 0us; 16391us; 0us; 16392us; 7us; 32768us; 0us; 13us; 2us; 105us; 9us; 31us; 20us; 42us; 48us; 109us; 49us; 108us; 50us; 110us; 0us; 16393us; 17us; 16394us; 10us; 16404us; 30us; 16404us; 31us; 16404us; 32us; 16404us; 33us; 16404us; 34us; 16404us; 35us; 16404us; 36us; 16404us; 37us; 16404us; 38us; 16404us; 40us; 16404us; 41us; 16404us; 42us; 16404us; 43us; 16404us; 45us; 54us; 46us; 16404us; 47us; 16404us; 16us; 16395us; 10us; 29us; 30us; 90us; 31us; 91us; 32us; 92us; 33us; 93us; 34us; 94us; 35us; 97us; 36us; 96us; 37us; 98us; 38us; 99us; 40us; 95us; 41us; 100us; 42us; 101us; 43us; 102us; 46us; 103us; 47us; 104us; 4us; 32768us; 2us; 105us; 48us; 109us; 49us; 108us; 50us; 110us; 0us; 16396us; 1us; 32768us; 0us; 32us; 7us; 32768us; 0us; 13us; 2us; 105us; 9us; 31us; 20us; 42us; 48us; 109us; 49us; 108us; 50us; 110us; 16us; 32768us; 10us; 34us; 30us; 90us; 31us; 91us; 32us; 92us; 33us; 93us; 34us; 94us; 35us; 97us; 36us; 96us; 37us; 98us; 38us; 99us; 40us; 95us; 41us; 100us; 42us; 101us; 43us; 102us; 46us; 103us; 47us; 104us; 4us; 32768us; 2us; 105us; 48us; 109us; 49us; 108us; 50us; 110us; 2us; 32768us; 0us; 37us; 1us; 36us; 0us; 16397us; 4us; 32768us; 2us; 105us; 48us; 109us; 49us; 108us; 50us; 110us; 1us; 32768us; 1us; 39us; 1us; 32768us; 1us; 40us; 0us; 16398us; 0us; 16399us; 1us; 32768us; 0us; 43us; 7us; 32768us; 0us; 13us; 2us; 105us; 9us; 31us; 20us; 42us; 48us; 109us; 49us; 108us; 50us; 110us; 16us; 32768us; 1us; 45us; 30us; 90us; 31us; 91us; 32us; 92us; 33us; 93us; 34us; 94us; 35us; 97us; 36us; 96us; 37us; 98us; 38us; 99us; 40us; 95us; 41us; 100us; 42us; 101us; 43us; 102us; 46us; 103us; 47us; 104us; 0us; 16400us; 0us; 16401us; 15us; 16402us; 30us; 90us; 31us; 91us; 32us; 92us; 33us; 93us; 34us; 94us; 35us; 97us; 36us; 96us; 37us; 98us; 38us; 99us; 40us; 95us; 41us; 100us; 42us; 101us; 43us; 102us; 46us; 103us; 47us; 104us; 16us; 32768us; 1us; 52us; 30us; 90us; 31us; 91us; 32us; 92us; 33us; 93us; 34us; 94us; 35us; 97us; 36us; 96us; 37us; 98us; 38us; 99us; 40us; 95us; 41us; 100us; 42us; 101us; 43us; 102us; 46us; 103us; 47us; 104us; 15us; 16421us; 30us; 90us; 31us; 91us; 32us; 92us; 33us; 93us; 34us; 94us; 35us; 97us; 36us; 96us; 37us; 98us; 38us; 99us; 40us; 95us; 41us; 100us; 42us; 101us; 43us; 102us; 46us; 103us; 47us; 104us; 15us; 16423us; 30us; 90us; 31us; 91us; 32us; 92us; 33us; 93us; 34us; 94us; 35us; 97us; 36us; 96us; 37us; 98us; 38us; 99us; 40us; 95us; 41us; 100us; 42us; 101us; 43us; 102us; 46us; 103us; 47us; 104us; 7us; 32768us; 0us; 13us; 2us; 105us; 9us; 31us; 20us; 42us; 48us; 109us; 49us; 108us; 50us; 110us; 0us; 16403us; 1us; 16404us; 45us; 54us; 4us; 32768us; 2us; 105us; 48us; 109us; 49us; 108us; 50us; 110us; 0us; 16405us; 5us; 16406us; 23us; 58us; 24us; 70us; 25us; 75us; 27us; 64us; 29us; 61us; 0us; 16408us; 2us; 32768us; 22us; 67us; 28us; 59us; 1us; 32768us; 0us; 12us; 0us; 16409us; 1us; 32768us; 28us; 62us; 1us; 32768us; 0us; 12us; 0us; 16410us; 1us; 32768us; 28us; 65us; 1us; 32768us; 0us; 12us; 0us; 16411us; 5us; 32768us; 0us; 12us; 2us; 105us; 48us; 109us; 49us; 108us; 50us; 110us; 1us; 16420us; 26us; 88us; 0us; 16412us; 1us; 32768us; 29us; 71us; 1us; 32768us; 22us; 72us; 5us; 32768us; 0us; 12us; 2us; 105us; 48us; 109us; 49us; 108us; 50us; 110us; 1us; 16420us; 26us; 88us; 0us; 16413us; 1us; 32768us; 29us; 76us; 1us; 32768us; 22us; 77us; 5us; 32768us; 0us; 12us; 2us; 105us; 48us; 109us; 49us; 108us; 50us; 110us; 1us; 16420us; 26us; 88us; 0us; 16414us; 0us; 16415us; 2us; 16419us; 10us; 86us; 45us; 82us; 4us; 32768us; 2us; 105us; 48us; 109us; 49us; 108us; 50us; 110us; 1us; 16418us; 10us; 84us; 4us; 32768us; 2us; 105us; 48us; 109us; 49us; 108us; 50us; 110us; 0us; 16416us; 4us; 32768us; 2us; 105us; 48us; 109us; 49us; 108us; 50us; 110us; 0us; 16417us; 7us; 32768us; 0us; 13us; 2us; 105us; 9us; 31us; 20us; 42us; 48us; 109us; 49us; 108us; 50us; 110us; 7us; 32768us; 0us; 13us; 2us; 105us; 9us; 31us; 20us; 42us; 48us; 109us; 49us; 108us; 50us; 110us; 0us; 16424us; 0us; 16425us; 0us; 16426us; 0us; 16427us; 0us; 16428us; 0us; 16429us; 0us; 16430us; 0us; 16431us; 0us; 16432us; 0us; 16433us; 0us; 16434us; 0us; 16435us; 0us; 16436us; 0us; 16437us; 0us; 16438us; 4us; 32768us; 2us; 105us; 48us; 109us; 49us; 108us; 50us; 110us; 1us; 32768us; 3us; 107us; 0us; 16439us; 0us; 16440us; 0us; 16441us; 0us; 16442us; 1us; 32768us; 18us; 112us; 4us; 32768us; 2us; 105us; 48us; 109us; 49us; 108us; 50us; 110us; 0us; 16444us; 1us; 16445us; 44us; 115us; 4us; 32768us; 2us; 105us; 48us; 109us; 49us; 108us; 50us; 110us; 0us; 16446us; 2us; 16447us; 5us; 118us; 6us; 119us; 0us; 16448us; 0us; 16449us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 2us; 3us; 5us; 6us; 9us; 17us; 20us; 26us; 32us; 34us; 36us; 37us; 39us; 48us; 50us; 56us; 57us; 62us; 63us; 65us; 67us; 69us; 70us; 71us; 72us; 80us; 81us; 99us; 116us; 121us; 122us; 124us; 132us; 149us; 154us; 157us; 158us; 163us; 165us; 167us; 168us; 169us; 171us; 179us; 196us; 197us; 198us; 214us; 231us; 247us; 263us; 271us; 272us; 274us; 279us; 280us; 286us; 287us; 290us; 292us; 293us; 295us; 297us; 298us; 300us; 302us; 303us; 309us; 311us; 312us; 314us; 316us; 322us; 324us; 325us; 327us; 329us; 335us; 337us; 338us; 339us; 342us; 347us; 349us; 354us; 355us; 360us; 361us; 369us; 377us; 378us; 379us; 380us; 381us; 382us; 383us; 384us; 385us; 386us; 387us; 388us; 389us; 390us; 391us; 392us; 397us; 399us; 400us; 401us; 402us; 403us; 405us; 410us; 411us; 413us; 418us; 419us; 422us; 423us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 2us; 8us; 4us; 5us; 0us; 4us; 1us; 1us; 3us; 1us; 1us; 3us; 6us; 9us; 1us; 4us; 1us; 3us; 3us; 1us; 3us; 0us; 1us; 2us; 3us; 3us; 3us; 4us; 5us; 5us; 1us; 5us; 3us; 3us; 1us; 0us; 2us; 0us; 2us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 3us; 1us; 1us; 1us; 0us; 3us; 1us; 3us; 1us; 2us; 2us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 2us; 3us; 3us; 4us; 4us; 4us; 5us; 5us; 6us; 6us; 6us; 7us; 7us; 7us; 7us; 7us; 7us; 7us; 8us; 8us; 9us; 9us; 9us; 10us; 10us; 10us; 10us; 10us; 10us; 11us; 11us; 11us; 11us; 11us; 12us; 12us; 13us; 13us; 14us; 14us; 14us; 14us; 14us; 14us; 14us; 14us; 14us; 14us; 14us; 14us; 14us; 14us; 14us; 15us; 15us; 15us; 15us; 16us; 16us; 17us; 17us; 18us; 18us; 18us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 65535us; 16385us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16386us; 65535us; 65535us; 65535us; 65535us; 16387us; 65535us; 16388us; 65535us; 65535us; 65535us; 16390us; 16391us; 16392us; 65535us; 16393us; 65535us; 65535us; 65535us; 16396us; 65535us; 65535us; 65535us; 65535us; 65535us; 16397us; 65535us; 65535us; 65535us; 16398us; 16399us; 65535us; 65535us; 65535us; 16400us; 16401us; 65535us; 65535us; 65535us; 65535us; 65535us; 16403us; 65535us; 65535us; 16405us; 65535us; 16408us; 65535us; 65535us; 16409us; 65535us; 65535us; 16410us; 65535us; 65535us; 16411us; 65535us; 65535us; 16412us; 65535us; 65535us; 65535us; 65535us; 16413us; 65535us; 65535us; 65535us; 65535us; 16414us; 16415us; 65535us; 65535us; 65535us; 65535us; 16416us; 65535us; 16417us; 65535us; 65535us; 16424us; 16425us; 16426us; 16427us; 16428us; 16429us; 16430us; 16431us; 16432us; 16433us; 16434us; 16435us; 16436us; 16437us; 16438us; 65535us; 65535us; 16439us; 16440us; 16441us; 16442us; 65535us; 65535us; 16444us; 65535us; 65535us; 16446us; 65535us; 16448us; 16449us; |]
let _fsyacc_reductions ()  =    [| 
# 448 "SqlYacc.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : HumaneOrm.Sql.SqlStatement)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (Microsoft.FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startstart));
# 457 "SqlYacc.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'query)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 27 "SqlYacc.fsy"
                                         _1 
                   )
# 27 "SqlYacc.fsy"
                 : HumaneOrm.Sql.SqlStatement));
# 468 "SqlYacc.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'optTopDistinct)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'columnList)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'joinTable)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'joinList)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : 'whereClause)) in
            let _8 = (let data = parseState.GetInput(8) in (Microsoft.FSharp.Core.Operators.unbox data : 'orderByClause)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 33 "SqlYacc.fsy"
                                                 
                                                     { 
                                                         Table = _5;
                                                         TopDistinct = _2;
                                                         Columns = List.rev _3;   
                                                         Joins = _6;   
                                                         Where = _7;   
                                                         OrderBy = _8 
                                                     }   
                                                 
                   )
# 33 "SqlYacc.fsy"
                 : 'query));
# 493 "SqlYacc.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'query)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'value)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 44 "SqlYacc.fsy"
                                                             _2, _4 
                   )
# 44 "SqlYacc.fsy"
                 : 'subquery));
# 505 "SqlYacc.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'query)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'value)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 45 "SqlYacc.fsy"
                                                               _2, _5 
                   )
# 45 "SqlYacc.fsy"
                 : 'subquery));
# 517 "SqlYacc.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 48 "SqlYacc.fsy"
                                         None 
                   )
# 48 "SqlYacc.fsy"
                 : 'optTopDistinct));
# 527 "SqlYacc.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 49 "SqlYacc.fsy"
                                                          Some(Top(_3)) 
                   )
# 49 "SqlYacc.fsy"
                 : 'optTopDistinct));
# 538 "SqlYacc.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 50 "SqlYacc.fsy"
                                                Some(Distinct) 
                   )
# 50 "SqlYacc.fsy"
                 : 'optTopDistinct));
# 548 "SqlYacc.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'column)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 53 "SqlYacc.fsy"
                                                 [_1] 
                   )
# 53 "SqlYacc.fsy"
                 : 'columnList));
# 559 "SqlYacc.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'columnList)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'column)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 54 "SqlYacc.fsy"
                                                              _3 :: _1 
                   )
# 54 "SqlYacc.fsy"
                 : 'columnList));
# 571 "SqlYacc.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'value)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 57 "SqlYacc.fsy"
                                              Expression(Atom(_1), _1) 
                   )
# 57 "SqlYacc.fsy"
                 : 'column));
# 582 "SqlYacc.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expressionChain)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 59 "SqlYacc.fsy"
                                                     Expression(_1, String("[NA]"):> Value) 
                   )
# 59 "SqlYacc.fsy"
                 : 'column));
# 593 "SqlYacc.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expressionChain)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'value)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 60 "SqlYacc.fsy"
                                                            Expression(_1, _3) 
                   )
# 60 "SqlYacc.fsy"
                 : 'column));
# 605 "SqlYacc.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expressionChain)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'value)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 63 "SqlYacc.fsy"
                                                                          Cast(_3, _5) 
                   )
# 63 "SqlYacc.fsy"
                 : 'expressionChain));
# 617 "SqlYacc.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expressionChain)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'value)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : 'value)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 64 "SqlYacc.fsy"
                                                                                          CastWithPrecision(_3, _5, _7) 
                   )
# 64 "SqlYacc.fsy"
                 : 'expressionChain));
# 630 "SqlYacc.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'subquery)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 65 "SqlYacc.fsy"
                                                ScalarExpressionSubquery(_1) 
                   )
# 65 "SqlYacc.fsy"
                 : 'expressionChain));
# 641 "SqlYacc.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expressionChain)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 67 "SqlYacc.fsy"
                                                                    Unary(Count, _3) 
                   )
# 67 "SqlYacc.fsy"
                 : 'expressionChain));
# 652 "SqlYacc.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 68 "SqlYacc.fsy"
                                                 _1 
                   )
# 68 "SqlYacc.fsy"
                 : 'expressionChain));
# 663 "SqlYacc.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expressionChain)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'op)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expressionChain)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 69 "SqlYacc.fsy"
                                                                   Binary(_2, _1, _3) 
                   )
# 69 "SqlYacc.fsy"
                 : 'expressionChain));
# 676 "SqlYacc.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'expressionChain)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 70 "SqlYacc.fsy"
                                                                _2 
                   )
# 70 "SqlYacc.fsy"
                 : 'expressionChain));
# 687 "SqlYacc.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'value)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 73 "SqlYacc.fsy"
                                              Atom(_1) 
                   )
# 73 "SqlYacc.fsy"
                 : 'expression));
# 698 "SqlYacc.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'value)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'value)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 74 "SqlYacc.fsy"
                                                     Binary(NameScope, Atom(_1), Atom(_3)) 
                   )
# 74 "SqlYacc.fsy"
                 : 'expression));
# 710 "SqlYacc.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 77 "SqlYacc.fsy"
                                            [] 
                   )
# 77 "SqlYacc.fsy"
                 : 'joinList));
# 720 "SqlYacc.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'joinClause)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 78 "SqlYacc.fsy"
                                                    [_1] 
                   )
# 78 "SqlYacc.fsy"
                 : 'joinList));
# 731 "SqlYacc.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'joinClause)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'joinList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 79 "SqlYacc.fsy"
                                                           _1 :: _2 
                   )
# 79 "SqlYacc.fsy"
                 : 'joinList));
# 743 "SqlYacc.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'subquery)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 82 "SqlYacc.fsy"
                                                            TableSubquery(_3), InnerApply, None 
                   )
# 82 "SqlYacc.fsy"
                 : 'joinClause));
# 754 "SqlYacc.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'subquery)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 83 "SqlYacc.fsy"
                                                            TableSubquery(_3), OuterApply, None 
                   )
# 83 "SqlYacc.fsy"
                 : 'joinClause));
# 765 "SqlYacc.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'subquery)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 84 "SqlYacc.fsy"
                                                            TableSubquery(_3), CrossApply, None 
                   )
# 84 "SqlYacc.fsy"
                 : 'joinClause));
# 776 "SqlYacc.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'joinTable)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'joinOnClause)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 85 "SqlYacc.fsy"
                                                                      _3, Inner, _4 
                   )
# 85 "SqlYacc.fsy"
                 : 'joinClause));
# 788 "SqlYacc.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'joinTable)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'joinOnClause)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 86 "SqlYacc.fsy"
                                                                         _4, Left, _5 
                   )
# 86 "SqlYacc.fsy"
                 : 'joinClause));
# 800 "SqlYacc.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'joinTable)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'joinOnClause)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 87 "SqlYacc.fsy"
                                                                          _4, Right, _5 
                   )
# 87 "SqlYacc.fsy"
                 : 'joinClause));
# 812 "SqlYacc.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'subquery)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 90 "SqlYacc.fsy"
                                                TableSubquery(_1) 
                   )
# 90 "SqlYacc.fsy"
                 : 'joinTable));
# 823 "SqlYacc.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'value)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'value)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'value)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 91 "SqlYacc.fsy"
                                                            Table(_3, _5) 
                   )
# 91 "SqlYacc.fsy"
                 : 'joinTable));
# 836 "SqlYacc.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'value)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'value)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 92 "SqlYacc.fsy"
                                                    Table(_1, _3) 
                   )
# 92 "SqlYacc.fsy"
                 : 'joinTable));
# 848 "SqlYacc.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'value)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'value)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 93 "SqlYacc.fsy"
                                                     Table(_3, _3) 
                   )
# 93 "SqlYacc.fsy"
                 : 'joinTable));
# 860 "SqlYacc.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'value)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 94 "SqlYacc.fsy"
                                              Table(_1, _1) 
                   )
# 94 "SqlYacc.fsy"
                 : 'joinTable));
# 871 "SqlYacc.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 97 "SqlYacc.fsy"
                                            None 
                   )
# 97 "SqlYacc.fsy"
                 : 'joinOnClause));
# 881 "SqlYacc.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'expressionChain)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 98 "SqlYacc.fsy"
                                                          Some(_2) 
                   )
# 98 "SqlYacc.fsy"
                 : 'joinOnClause));
# 892 "SqlYacc.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 102 "SqlYacc.fsy"
                                            None 
                   )
# 102 "SqlYacc.fsy"
                 : 'whereClause));
# 902 "SqlYacc.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'expressionChain)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 103 "SqlYacc.fsy"
                                                             Some(_2) 
                   )
# 103 "SqlYacc.fsy"
                 : 'whereClause));
# 913 "SqlYacc.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 105 "SqlYacc.fsy"
                              Eq 
                   )
# 105 "SqlYacc.fsy"
                 : 'op));
# 923 "SqlYacc.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 105 "SqlYacc.fsy"
                                          Lt 
                   )
# 105 "SqlYacc.fsy"
                 : 'op));
# 933 "SqlYacc.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 105 "SqlYacc.fsy"
                                                      Le 
                   )
# 105 "SqlYacc.fsy"
                 : 'op));
# 943 "SqlYacc.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 105 "SqlYacc.fsy"
                                                                  Gt 
                   )
# 105 "SqlYacc.fsy"
                 : 'op));
# 953 "SqlYacc.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 105 "SqlYacc.fsy"
                                                                              Ge 
                   )
# 105 "SqlYacc.fsy"
                 : 'op));
# 963 "SqlYacc.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 105 "SqlYacc.fsy"
                                                                                           Add 
                   )
# 105 "SqlYacc.fsy"
                 : 'op));
# 973 "SqlYacc.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 105 "SqlYacc.fsy"
                                                                                                         Sub 
                   )
# 105 "SqlYacc.fsy"
                 : 'op));
# 983 "SqlYacc.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 105 "SqlYacc.fsy"
                                                                                                                       Mul 
                   )
# 105 "SqlYacc.fsy"
                 : 'op));
# 993 "SqlYacc.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 105 "SqlYacc.fsy"
                                                                                                                                     Div 
                   )
# 105 "SqlYacc.fsy"
                 : 'op));
# 1003 "SqlYacc.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 105 "SqlYacc.fsy"
                                                                                                                                                   Mod 
                   )
# 105 "SqlYacc.fsy"
                 : 'op));
# 1013 "SqlYacc.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 105 "SqlYacc.fsy"
                                                                                                                                                                Pow
                   )
# 105 "SqlYacc.fsy"
                 : 'op));
# 1023 "SqlYacc.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 105 "SqlYacc.fsy"
                                                                                                                                                                             Like
                   )
# 105 "SqlYacc.fsy"
                 : 'op));
# 1033 "SqlYacc.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 105 "SqlYacc.fsy"
                                                                                                                                                                                             Escape
                   )
# 105 "SqlYacc.fsy"
                 : 'op));
# 1043 "SqlYacc.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 105 "SqlYacc.fsy"
                                                                                                                                                                                                            And
                   )
# 105 "SqlYacc.fsy"
                 : 'op));
# 1053 "SqlYacc.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 105 "SqlYacc.fsy"
                                                                                                                                                                                                                       Or
                   )
# 105 "SqlYacc.fsy"
                 : 'op));
# 1063 "SqlYacc.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'value)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 108 "SqlYacc.fsy"
                                                              _2 
                   )
# 108 "SqlYacc.fsy"
                 : 'value));
# 1074 "SqlYacc.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 109 "SqlYacc.fsy"
                                               Int(_1) 
                   )
# 109 "SqlYacc.fsy"
                 : 'value));
# 1085 "SqlYacc.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : float)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 110 "SqlYacc.fsy"
                                                 Float(_1) 
                   )
# 110 "SqlYacc.fsy"
                 : 'value));
# 1096 "SqlYacc.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 111 "SqlYacc.fsy"
                                              String(_1) 
                   )
# 111 "SqlYacc.fsy"
                 : 'value));
# 1107 "SqlYacc.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 114 "SqlYacc.fsy"
                                            [] 
                   )
# 114 "SqlYacc.fsy"
                 : 'orderByClause));
# 1117 "SqlYacc.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'orderByList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 115 "SqlYacc.fsy"
                                                            _3 
                   )
# 115 "SqlYacc.fsy"
                 : 'orderByClause));
# 1128 "SqlYacc.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'orderBy)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 118 "SqlYacc.fsy"
                                                  [_1] 
                   )
# 118 "SqlYacc.fsy"
                 : 'orderByList));
# 1139 "SqlYacc.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'orderBy)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'orderByList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 119 "SqlYacc.fsy"
                                                                _1 :: _3 
                   )
# 119 "SqlYacc.fsy"
                 : 'orderByList));
# 1151 "SqlYacc.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'value)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 122 "SqlYacc.fsy"
                                                 _1, Asc 
                   )
# 122 "SqlYacc.fsy"
                 : 'orderBy));
# 1162 "SqlYacc.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'value)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 123 "SqlYacc.fsy"
                                                    _1, Asc 
                   )
# 123 "SqlYacc.fsy"
                 : 'orderBy));
# 1173 "SqlYacc.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'value)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 124 "SqlYacc.fsy"
                                                    _1, Desc 
                   )
# 124 "SqlYacc.fsy"
                 : 'orderBy));
|]
# 1185 "SqlYacc.fs"
let tables () : Microsoft.FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:Microsoft.FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 54;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let start lexer lexbuf : HumaneOrm.Sql.SqlStatement =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
