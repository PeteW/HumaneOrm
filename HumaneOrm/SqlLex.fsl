{
module Lexer
open Parser
open System   
open Microsoft.FSharp.Text.Lexing
 
let newline (lexbuf: LexBuffer<_>) = 
    lexbuf.StartPos <- lexbuf.StartPos.NextLine
 
let keywords =   
    [   
        "SELECT", SELECT;   
        "FROM", FROM;   
        "WHERE", WHERE;   
        "ORDER", ORDER;   
        "BY", BY;   
        "JOIN", JOIN;   
        "INNER", INNER;   
        "LEFT", LEFT;   
        "RIGHT", RIGHT;   
        "ASC", ASC;   
        "DESC", DESC;   
        "AND", AND;   
        "OR", OR;   
        "ON", ON;   
        "TOP", TOP;   
        "LIKE", LIKE;   
        "NOT", NOT;   
        "NULL", NULL;   
        "CAST", CAST;   
        "AS", AS;   
        "BETWEEN", BETWEEN;   
        "SET", SET;   
        "WITH", WITH;   
        "COUNT", COUNT;   
        "DISTINCT", DISTINCT;   
    ] |> Map.ofList   
 
let ops =   
    [   
        "=",    EQ;   
        "<",    LT;   
        "<=",   LE;   
        ">",    GT;   
        ">=",   GE;   
        "+",   ADD;   
        "*",   MUL;   
        "-",   SUB;   
        "/",   DIV;   
        "%",   MOD;   
        "^",   POW;   
    ] |> Map.ofList   
}   
 
let char        = ['a'-'z' 'A'-'Z']   
let digit       = ['0'-'9']   
let int         = '-'?digit+   
let float       = '-'?digit+ '.' digit+   
let identifier  = char(char|digit|['-' '_'])*   
let whitespace  = [' ' '\t']   
let newline     = "\n\r" | '\n' | '\r'  
let operator    = ">" | ">=" | "<" | "<=" | "=" | "+" | "*" | "-" | "/" | "%" | "^"
 
rule tokenize = parse   
| '\'' [^'\'']* '\'' {  ID((LexBuffer<string>.LexemeString lexbuf).Replace("\'","")) }
| whitespace    { tokenize lexbuf }   
| newline       { lexbuf.EndPos <- lexbuf.EndPos.NextLine; tokenize lexbuf; }   
| int           { INT(Int32.Parse(LexBuffer<int>.LexemeString lexbuf)) }   
| float         { FLOAT(Double.Parse(LexBuffer<float>.LexemeString lexbuf)) }   
| operator      { ops.[LexBuffer<string>.LexemeString lexbuf] }   
| identifier    { match keywords.TryFind((LexBuffer<string>.LexemeString lexbuf).ToUpper()) with   
                    | Some(token) -> token   
                    | None -> ID(LexBuffer<string>.LexemeString lexbuf) }   
| '*'           { STAR }   
| '.'           { DOT }   
| ','           { COMMA }   
| "("			{ LPAREN }
| ")"			{ RPAREN }
| "["			{ LBRACKET }
| "]"			{ RBRACKET }
| eof           { EOF }
